import logging
import asyncio
import aiosqlite
import signal
import sys
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest, TelegramConflictError
from aiohttp import web
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@sozvezdie_skidok")
ADMIN_IDS = {int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id}
PORT = int(os.getenv("PORT", 5000))

if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    main_menu = State()
    check_subscription = State()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
class Texts:
    WELCOME = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! üéâ\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç\n"
        "üí∞ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–π–º\n"
        "üõ°Ô∏è –û—Ñ–æ—Ä–º–∏—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫—É\n"
        "üíº –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    SUBSCRIBE_REQUIRED = "üì¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!"
    HELP = """
üìö –ü–æ–º–æ—â—å:
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    """
    MENU = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    CREDIT_TITLE = "üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã:"
    LOANS_TITLE = "üí∞ –ó–∞–π–º—ã –∏ –∫—Ä–µ–¥–∏—Ç—ã:"
    JOBS_TITLE = "üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å:"
    INSURANCE_TITLE = "üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ:"
    TREASURE_TITLE = "üéÅ –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –≤—ã–≥–æ–¥:"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self, db_path: str = "users.db"):
        self.db_path = db_path

    async def init_db(self):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    subscribed BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            await db.commit()

    async def add_user(self, user_id: int):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute(
                "INSERT OR IGNORE INTO users (user_id) VALUES (?)",
                (user_id,)
            )
            await db.commit()

    async def update_subscription(self, user_id: int, status: bool):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute(
                "UPDATE users SET subscribed = ? WHERE user_id = ?",
                (status, user_id)
            )
            await db.commit()

    async def get_stats(self):
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute("SELECT COUNT(*) FROM users")
            total_users = await cursor.fetchone()
            cursor = await db.execute("SELECT COUNT(*) FROM users WHERE subscribed = TRUE")
            active_users = await cursor.fetchone()
            return total_users[0], active_users[0]

db = Database()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
class Keyboards:
    @staticmethod
    def subscription():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_ID[1:]}")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ])

    @staticmethod
    def main_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data="credit"),
             InlineKeyboardButton(text="üí∞ –ó–∞–π–º—ã", callback_data="loans")],
            [InlineKeyboardButton(text="üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", callback_data="insurance"),
             InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞", callback_data="jobs")],
            [InlineKeyboardButton(text="üéÅ –ê–∫—Ü–∏–∏", callback_data="promotions")]
        ])

    @staticmethod
    def credit_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üß≠ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä", url="https://ppdu.ru/956606fa-02c7-4389-9069-943c0ab8c02b")],
            [InlineKeyboardButton(text="üè¶ –°–±–µ—Ä–ö–∞—Ä—Ç–∞", url="https://trk.ppdu.ru/click/3RujX0b6?erid=2SDnjcVm7Md")],
            [InlineKeyboardButton(text="üè¶ –¢-–ë–∞–Ω–∫ –ü–ª–∞—Ç–∏–Ω—É–º", url="https://trk.ppdu.ru/click/1McwYwsf?erid=2SDnjcyz7NY")],
            [InlineKeyboardButton(text="üè¶ –£—Ä–∞–ª—Å–∏–± - –ö–µ—à–±—ç–∫", url="https://trk.ppdu.ru/click/bhA4OaNe?erid=2SDnje5iw3n")],
            [InlineKeyboardButton(text="üè¶ –°–æ–≤–∫–æ–º–±–∞–Ω–∫ - –•–∞–ª–≤–∞ –ú–ò–†", url="https://trk.ppdu.ru/click/8lDSWnJn?erid=Kra23XHz1")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])

    @staticmethod
    def loans_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –ó–∞–π–º-–ú–∞—Å—Ç–µ—Ä", url="https://ppdu.ru/8bfd124d-1628-4eb2-a238-531a4c629329")],
            [InlineKeyboardButton(text="üí∏ MoneyMan", url="https://trk.ppdu.ru/click/iaxTaZ7u?erid=2SDnjd4NP9c")],
            [InlineKeyboardButton(text="üí∏ Joymoney", url="https://trk.ppdu.ru/click/1Uf12FL6?erid=Kra23wZmP")],
            [InlineKeyboardButton(text="üí∏ –¶–µ–ª–µ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã", url="https://trk.ppdu.ru/click/uqh4iG8P?erid=2SDnjeePynH")],
            [InlineKeyboardButton(text="üí∏ –î–æ–±—Ä–æ–ó–∞–π–º", url="https://trk.ppdu.ru/click/VGWQ7lRU?erid=2SDnjdGSjHa")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])

    @staticmethod
    def jobs_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä", url="https://ppdu.ru/c8f23f85-45da-4804-a190-e6a358a9061b")],
            [InlineKeyboardButton(text="üö¥‚Äç‚ôÇÔ∏è –Ø–Ω–¥–µ–∫—Å.–ï–¥–∞/–õ–∞–≤–∫–∞", url="https://trk.ppdu.ru/click/80UG6A1L?erid=Kra23uVC3")],
            [InlineKeyboardButton(text="üöö –ú–∞–≥–Ω–∏—Ç (–ö–∞—Ç. –ï)", url="https://trk.ppdu.ru/click/kUTRwEqg?erid=2SDnjcR2t2N")],
            [InlineKeyboardButton(text="üçî Burger King", url="https://trk.ppdu.ru/click/UpMcqi2J?erid=2SDnjdu6ZqS")],
            [InlineKeyboardButton(text="üè¶ –ê–ª—å—Ñ–∞ –ë–∞–Ω–∫", url="https://trk.ppdu.ru/click/Sg02KcAS?erid=2SDnjbsvvT3")],
            [InlineKeyboardButton(text="üè¶ –¢-–ë–∞–Ω–∫ ‚Äî –†–∞–±–æ—Ç–∞", url="https://trk.ppdu.ru/click/JdRx49qY?erid=2SDnjcbs16H")],
            [InlineKeyboardButton(text="üì± –ú–¢–° –ü—Ä–æ–¥–∞–∂–∏", url="https://trk.ppdu.ru/click/8Vv8AUVS?erid=2SDnjdhc8em")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])

    @staticmethod
    def insurance_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõ°Ô∏è –û–°–ê–ì–û", url="https://b2c.pampadu.ru/index.html#2341f23d-fced-49e1-8ecc-2184e809bf77")],
            [InlineKeyboardButton(text="üè† –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∏–ø–æ—Ç–µ–∫–∏", url="https://ipoteka.pampadu.ru/index.html#c46f5bfd-5d57-41d8-889c-61b8b6860cad")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])

    @staticmethod
    def promotions_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –≤—ã–≥–æ–¥", url="https://ppdu.ru/gifts/c94552a5-a5b6-4e65-b191-9b6bc36cd85b")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await db.add_user(message.from_user.id)
    await check_subscription_wrapper(message, state)

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message, state: FSMContext):
    await show_main_menu(message)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(Texts.HELP)

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    total, active = await db.get_stats()
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {active}"
    )

@dp.callback_query(F.data == "check_subscription")
async def check_subscription(callback: types.CallbackQuery, state: FSMContext):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, callback.from_user.id)
        if member.status in ["member", "administrator", "creator"]:
            await db.update_subscription(callback.from_user.id, True)
            await callback.message.edit_text(Texts.WELCOME, reply_markup=Keyboards.main_menu())
        else:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!", show_alert=True)
    except TelegramBadRequest:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏!", show_alert=True)

@dp.callback_query(F.data.in_({"credit", "loans", "insurance", "jobs", "promotions"}))
async def handle_category(callback: types.CallbackQuery):
    category = callback.data
    menus = {
        "credit": (Keyboards.credit_menu(), Texts.CREDIT_TITLE),
        "loans": (Keyboards.loans_menu(), Texts.LOANS_TITLE),
        "insurance": (Keyboards.insurance_menu(), Texts.INSURANCE_TITLE),
        "jobs": (Keyboards.jobs_menu(), Texts.JOBS_TITLE),
        "promotions": (Keyboards.promotions_menu(), Texts.TREASURE_TITLE)
    }
    keyboard, text = menus[category]
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "back")
async def back_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(Texts.MENU, reply_markup=Keyboards.main_menu())

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_subscription_wrapper(message: types.Message, state: FSMContext):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, message.from_user.id)
        if member.status in ["member", "administrator", "creator"]:
            await db.update_subscription(message.from_user.id, True)
            await message.answer(Texts.WELCOME, reply_markup=Keyboards.main_menu())
        else:
            await message.answer(Texts.SUBSCRIBE_REQUIRED, reply_markup=Keyboards.subscription())
            await state.set_state(Form.check_subscription)
    except TelegramBadRequest:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_main_menu(message: types.Message):
    await message.answer(Texts.MENU, reply_markup=Keyboards.main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def shutdown(signal, loop, bot: Bot):
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    await bot.session.close()
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    [t.cancel() for t in tasks]
    await asyncio.gather(*tasks, return_exceptions=True)
    loop.stop()

@dp.errors(exception=TelegramConflictError)
async def handle_conflict_error(event: types.ErrorEvent):
    logger.critical("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...")
    await event.bot.session.close()
    await asyncio.sleep(5)
    await dp.start_polling(event.bot)

@dp.errors()
async def global_error_handler(event: types.ErrorEvent):
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {event.exception}")

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –∑–∞–ø—É—Å–∫
async def health_check(request):
    return web.json_response({
        "status": "OK",
        "timestamp": datetime.now().isoformat(),
        "service": "Telegram Bot"
    })

async def main():
    await db.init_db()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    app = web.Application()
    app.router.add_get("/health", health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, port=PORT)
    await site.start()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    loop = asyncio.get_event_loop()
    for sig in (signal.SIGTERM, signal.SIGINT):
        loop.add_signal_handler(
            sig, lambda: asyncio.create_task(shutdown(sig, loop, bot))
        )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types(),
            timeout=60,
            relax=0.1
        )
    except TelegramConflictError:
        logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞!")

if __name__ == "__main__":
    asyncio.run(main())