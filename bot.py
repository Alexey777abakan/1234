import os
import re
import signal
import logging
import asyncio
import aiosqlite
from contextlib import suppress
from datetime import datetime
from typing import Optional, Dict, List

from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º–∞—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.API_TOKEN = os.getenv("API_TOKEN")
        self.CHANNEL_ID = os.getenv("CHANNEL_ID", "@sozvezdie_skidok")
        self.ADMIN_IDS = {int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id}
        self.REDIS_URL = os.getenv("REDIS_URL")
        self.PORT = int(os.getenv("PORT", 8080))
        self.validate()

    def validate(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.API_TOKEN:
            raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        if not self.CHANNEL_ID.startswith("@"):
            raise ValueError("CHANNEL_ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")

config = Config()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
class Form(StatesGroup):
    menu = State()
    phone_input = State()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
class Texts:
    WELCOME = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞! üéâ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )
    MENU = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    PHONE_REQUEST = "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    PHONE_INVALID = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +7XXXXXXXXXX"
    SUBSCRIBE_REQUIRED = "üì¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!"
    ERROR = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    ADMIN_HELP = "–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n/broadcast - –†–∞—Å—Å—ã–ª–∫–∞\n/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

# –§–∞–±—Ä–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
class KeyboardFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    @staticmethod
    def create_menu() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
        items = [
            ("üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã", "credit_cards"),
            ("üí∞ –ó–∞–π–º—ã", "loans"),
            ("üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "insurance"),
            ("üíº –†–∞–±–æ—Ç–∞", "jobs"),
            ("üéÅ –ê–∫—Ü–∏–∏", "promotions")
        ]
        return KeyboardFactory._create_keyboard(items)

    @staticmethod
    def _create_keyboard(items: List[tuple], back: bool = True) -> InlineKeyboardMarkup:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        buttons = [
            [InlineKeyboardButton(text=text, callback_data=data)]
            for text, data in items
        ]
        if back:
            buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class UserRepository:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self, db_path: str = "users.db"):
        self.db_path = db_path
        self.cache = {}

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute('PRAGMA journal_mode=WAL')
            await db.execute('PRAGMA synchronous=NORMAL')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    phone TEXT CHECK(length(phone) BETWEEN 12 AND 20),
                    subscribed BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                ) STRICT
            ''')
            await db.execute('CREATE INDEX IF NOT EXISTS idx_users_phone ON users(phone)')
            await db.commit()

    async def get_user(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î"""
        if user_id in self.cache:
            return self.cache[user_id]
        
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                "SELECT * FROM users WHERE user_id = ?", (user_id,)
            ) as cursor:
                row = await cursor.fetchone()
                if row:
                    user = dict(row)
                    self.cache[user_id] = user
                    return user
                return None

    async def update_phone(self, user_id: int, phone: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute(
                "INSERT OR REPLACE INTO users (user_id, phone) VALUES (?, ?)",
                (user_id, phone)
            )
            await db.commit()
        if user_id in self.cache:
            self.cache[user_id]['phone'] = phone

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
class EnhancedErrorHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
    
    @staticmethod
    async def handle_error(message: Message, error: Exception, context: str):
        logger.error(f"Error in {context}: {str(error)}", exc_info=True)
        await message.answer(Texts.ERROR)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
bot = Bot(token=config.API_TOKEN)
storage = RedisStorage.from_url(config.REDIS_URL) if config.REDIS_URL else MemoryStorage()
dp = Dispatcher(storage=storage)
user_repo = UserRepository()

# –ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class LoggingMiddleware:
    async def __call__(self, handler, event, data):
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è: {event}")
        try:
            return await handler(event, data)
        except Exception as e:
            await EnhancedErrorHandler.handle_error(event, e, "middleware")
            raise

dp.update.middleware.register(LoggingMiddleware())

# –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        if not await check_subscription(message.from_user.id):
            await message.answer(Texts.SUBSCRIBE_REQUIRED)
            return

        user = await user_repo.get_user(message.from_user.id)
        text = Texts.WELCOME if not user else "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!"
        
        await message.answer(
            text,
            reply_markup=KeyboardFactory.create_menu()
        )
        await state.set_state(Form.menu)
        
    except Exception as e:
        await EnhancedErrorHandler.handle_error(message, e, "cmd_start")

@dp.callback_query(lambda c: c.data == "back")
async def back_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    try:
        await callback.message.edit_text(
            Texts.MENU,
            reply_markup=KeyboardFactory.create_menu()
        )
        await state.set_state(Form.menu)
    except Exception as e:
        await EnhancedErrorHandler.handle_error(callback.message, e, "back_handler")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(config.CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
async def shutdown(dispatcher: Dispatcher, bot: Bot, app: web.Application):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    await dispatcher.storage.close()
    await bot.session.close()
    await app.shutdown()

def handle_signal(signum, loop, dp: Dispatcher, bot: Bot, app: web.Application):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.warning(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    loop.create_task(shutdown(dp, bot, app))

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ healthcheck
async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return web.json_response({
        "status": "OK",
        "timestamp": datetime.now().isoformat(),
        "database": "active",
        "cache_size": len(user_repo.cache)
    })

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await user_repo.initialize()
    
    app = web.Application()
    app.router.add_get("/health", health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", config.PORT)
    
    loop = asyncio.get_event_loop()
    for signame in ('SIGINT', 'SIGTERM'):
        loop.add_signal_handler(
            getattr(signal, signame),
            lambda: handle_signal(signame, loop, dp, bot, app)
        )

    try:
        await site.start()
        logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {config.PORT}")
        await dp.start_polling(bot)
    finally:
        await runner.cleanup()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")