import logging
import asyncio
import aiosqlite
import signal
import sys
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest, TelegramConflictError
from aiohttp import web
from dotenv import load_dotenv
import os
from keyboards import keyboard_manager  # –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@sozvezdie_skidok")
ADMIN_IDS = {int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id}
PORT = int(os.getenv("PORT", 5000))

if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    main_menu = State()
    check_subscription = State()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
class Texts:
    WELCOME = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! üéâ\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç\n"
        "üí∞ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–π–º\n"
        "üõ°Ô∏è –û—Ñ–æ—Ä–º–∏—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫—É\n"
        "üíº –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    SUBSCRIBE_REQUIRED = "üì¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!"
    HELP = """
üìö –ü–æ–º–æ—â—å:
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    """
    MENU = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    CREDIT_TITLE = "üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã:"
    LOANS_TITLE = "üí∞ –ó–∞–π–º—ã –∏ –∫—Ä–µ–¥–∏—Ç—ã:"
    JOBS_TITLE = "üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å:"
    INSURANCE_TITLE = "üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ:"
    TREASURE_TITLE = "üéÅ –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –≤—ã–≥–æ–¥:"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self, db_path: str = "users.db"):
        self.db_path = db_path

    async def init_db(self):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    subscribed BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            await db.commit()

    async def add_user(self, user_id: int):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute(
                "INSERT OR IGNORE INTO users (user_id) VALUES (?)",
                (user_id,)
            )
            await db.commit()

    async def update_subscription(self, user_id: int, status: bool):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute(
                "UPDATE users SET subscribed = ? WHERE user_id = ?",
                (status, user_id)
            )
            await db.commit()

    async def get_stats(self):
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute("SELECT COUNT(*) FROM users")
            total_users = await cursor.fetchone()
            cursor = await db.execute("SELECT COUNT(*) FROM users WHERE subscribed = TRUE")
            active_users = await cursor.fetchone()
            return total_users[0], active_users[0]

db = Database()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await db.add_user(message.from_user.id)
    await check_subscription_wrapper(message, state)

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message, state: FSMContext):
    await show_main_menu(message)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(Texts.HELP)

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    total, active = await db.get_stats()
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {active}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
@dp.callback_query(F.data == "check_subscription")
async def check_subscription(callback: types.CallbackQuery, state: FSMContext):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, callback.from_user.id)
        if member.status in ["member", "administrator", "creator"]:
            await db.update_subscription(callback.from_user.id, True)
            await callback.message.edit_text(
                Texts.WELCOME,
                reply_markup=keyboard_manager.get_markup("main_menu")
            )
        else:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!", show_alert=True)
    except TelegramBadRequest:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏!", show_alert=True)

@dp.callback_query(F.data.in_({"credit", "loans", "insurance", "jobs", "promotions"}))
async def handle_category(callback: types.CallbackQuery):
    category = callback.data
    menu_map = {
        "credit": ("credit_menu", Texts.CREDIT_TITLE),
        "loans": ("loans_menu", Texts.LOANS_TITLE),
        "insurance": ("insurance_menu", Texts.INSURANCE_TITLE),
        "jobs": ("jobs_menu", Texts.JOBS_TITLE),
        "promotions": ("promotions_menu", Texts.TREASURE_TITLE)
    }
    
    menu_name, text = menu_map[category]
    await callback.message.edit_text(
        text,
        reply_markup=keyboard_manager.get_markup(menu_name)
    )

@dp.callback_query(F.data == "back")
async def back_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        Texts.MENU,
        reply_markup=keyboard_manager.get_markup("main_menu")
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_subscription_wrapper(message: types.Message, state: FSMContext):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, message.from_user.id)
        if member.status in ["member", "administrator", "creator"]:
            await db.update_subscription(message.from_user.id, True)
            await message.answer(
                Texts.WELCOME,
                reply_markup=keyboard_manager.get_markup("main_menu")
            )
        else:
            await message.answer(
                Texts.SUBSCRIBE_REQUIRED,
                reply_markup=keyboard_manager.get_markup(
                    "subscription",
                    channel_id=CHANNEL_ID[1:]
                )
            )
            await state.set_state(Form.check_subscription)
    except TelegramBadRequest:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_main_menu(message: types.Message):
    await message.answer(
        Texts.MENU,
        reply_markup=keyboard_manager.get_markup("main_menu")
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def shutdown(signal, loop, bot: Bot):
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    await bot.session.close()
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    [t.cancel() for t in tasks]
    await asyncio.gather(*tasks, return_exceptions=True)
    loop.stop()

@dp.error()
async def error_handler(event: types.ErrorEvent):
    if isinstance(event.exception, TelegramConflictError):
        logger.critical("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...")
        await event.bot.session.close()
        await asyncio.sleep(5)
        await dp.start_polling(event.bot)
    else:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {event.exception}")

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –∑–∞–ø—É—Å–∫
async def health_check(request):
    return web.json_response({
        "status": "OK",
        "timestamp": datetime.now().isoformat(),
        "service": "Telegram Bot"
    })

async def main():
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await bot.delete_webhook(drop_pending_updates=True)
    await db.init_db()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    app = web.Application()
    app.router.add_get("/health", health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, port=PORT)
    await site.start()
    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    loop = asyncio.get_event_loop()
    for sig in (signal.SIGTERM, signal.SIGINT):
        loop.add_signal_handler(
            sig, lambda: asyncio.create_task(shutdown(sig, loop, bot))
        )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types(),
            timeout=60,
            relax=0.1
        )
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    asyncio.run(main()