import logging
import asyncio
import aiosqlite
import signal
import sys
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramConflictError
from aiohttp import web
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class Config:
    def __init__(self):
        self.API_TOKEN = os.getenv("API_TOKEN")
        self.CHANNEL_ID = os.getenv("CHANNEL_ID", "@sozvezdie_skidok")
        self.ADMIN_IDS = {int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id}
        self.PORT = int(os.getenv("PORT", 5000))
        self.validate()
    
    def validate(self):
        if not self.API_TOKEN:
            raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

config = Config()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    main_menu = State()
    check_subscription = State()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
class Texts:
    WELCOME = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! üéâ\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç\n"
        "üí∞ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–π–º\n"
        "üõ°Ô∏è –û—Ñ–æ—Ä–º–∏—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫—É\n"
        "üíº –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    MENU = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    SUBSCRIBE_REQUIRED = "üì¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!"
    CREDIT_TITLE = "üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã:"
    LOANS_TITLE = "üí∞ –ó–∞–π–º—ã –∏ –∫—Ä–µ–¥–∏—Ç—ã:"
    JOBS_TITLE = "üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å:"
    INSURANCE_TITLE = "üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ:"
    TREASURE_TITLE = "üéÅ –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –≤—ã–≥–æ–¥:"
    ERROR = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
class Keyboards:
    @staticmethod
    def subscription():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", 
                url=f"https://t.me/{config.CHANNEL_ID[1:]}")],
            [InlineKeyboardButton(
                text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", 
                callback_data="check_subscription")]
        ])

    @staticmethod
    def main_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data="credit"),
             InlineKeyboardButton(text="üí∞ –ó–∞–π–º—ã", callback_data="loans")],
            [InlineKeyboardButton(text="üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", callback_data="insurance"),
             InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞", callback_data="jobs")],
            [InlineKeyboardButton(text="üéÅ –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –≤—ã–≥–æ–¥", callback_data="treasure")]
        ])

    @staticmethod
    def credit_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üß≠ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä", url="https://ppdu.ru/956606fa-02c7-4389-9069-943c0ab8c02b")],
            [InlineKeyboardButton(text="üè¶ –°–±–µ—Ä–ë–∞–Ω–∫ - –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –°–±–µ—Ä–ö–∞—Ä—Ç–∞", url="https://trk.ppdu.ru/click/3RujX0b6?erid=2SDnjcVm7Md")],
            [InlineKeyboardButton(text="üè¶ –¢-–ë–∞–Ω–∫ - –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –ü–ª–∞—Ç–∏–Ω—É–º", url="https://trk.ppdu.ru/click/1McwYwsf?erid=2SDnjcyz7NY")],
            [InlineKeyboardButton(text="üè¶ –£—Ä–∞–ª—Å–∏–± - –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –∫–µ—à–±—ç–∫–æ–º", url="https://trk.ppdu.ru/click/bhA4OaNe?erid=2SDnje5iw3n")],
            [InlineKeyboardButton(text="üè¶ –¢-–ë–∞–Ω–∫ ‚Äî –ö–µ—à–±—ç–∫ 2 000 —Ä—É–±–ª–µ–π", url="https://trk.ppdu.ru/click/QYJQHNtB?erid=2SDnjdSG9a1")],
            [InlineKeyboardButton(text="üè¶ –°–æ–≤–∫–æ–º–±–∞–Ω–∫ - –•–∞–ª–≤–∞ –ú–ò–†", url="https://trk.ppdu.ru/click/8lDSWnJn?erid=Kra23XHz1")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])

    @staticmethod
    def loans_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –ó–∞–π–º-–ú–∞—Å—Ç–µ—Ä", url="https://ppdu.ru/8bfd124d-1628-4eb2-a238-531a4c629329")],
            [InlineKeyboardButton(text="üí∏ MoneyMan", url="https://trk.ppdu.ru/click/iaxTaZ7u?erid=2SDnjd4NP9c")],
            [InlineKeyboardButton(text="üí∏ Joymoney", url="https://trk.ppdu.ru/click/1Uf12FL6?erid=Kra23wZmP")],
            [InlineKeyboardButton(text="üí∏ –¶–µ–ª–µ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã", url="https://trk.ppdu.ru/click/uqh4iG8P?erid=2SDnjeePynH")],
            [InlineKeyboardButton(text="üí∏ –î–æ–±—Ä–æ–ó–∞–π–º", url="https://trk.ppdu.ru/click/VGWQ7lRU?erid=2SDnjdGSjHa")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])

    @staticmethod
    def jobs_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä", url="https://ppdu.ru/c8f23f85-45da-4804-a190-e6a358a9061b")],
            [InlineKeyboardButton(text="üö¥‚Äç‚ôÇÔ∏è –Ø–Ω–¥–µ–∫—Å.–ï–¥–∞/–õ–∞–≤–∫–∞", url="https://trk.ppdu.ru/click/80UG6A1L?erid=Kra23uVC3")],
            [InlineKeyboardButton(text="üöö –ú–∞–≥–Ω–∏—Ç (–ö–∞—Ç. –ï)", url="https://trk.ppdu.ru/click/kUTRwEqg?erid=2SDnjcR2t2N")],
            [InlineKeyboardButton(text="üçî Burger King", url="https://trk.ppdu.ru/click/UpMcqi2J?erid=2SDnjdu6ZqS")],
            [InlineKeyboardButton(text="üè¶ –ê–ª—å—Ñ–∞ –ë–∞–Ω–∫", url="https://trk.ppdu.ru/click/Sg02KcAS?erid=2SDnjbsvvT3")],
            [InlineKeyboardButton(text="üè¶ –¢-–ë–∞–Ω–∫ ‚Äî –†–∞–±–æ—Ç–∞", url="https://trk.ppdu.ru/click/JdRx49qY?erid=2SDnjcbs16H")],
            [InlineKeyboardButton(text="üì± –ú–¢–° –ü—Ä–æ–¥–∞–∂–∏", url="https://trk.ppdu.ru/click/8Vv8AUVS?erid=2SDnjdhc8em")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])

    @staticmethod
    def insurance_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõ°Ô∏è –û–°–ê–ì–û", url="https://b2c.pampadu.ru/index.html#2341f23d-fced-49e1-8ecc-2184e809bf77")],
            [InlineKeyboardButton(text="üè† –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∏–ø–æ—Ç–µ–∫–∏", url="https://ipoteka.pampadu.ru/index.html#c46f5bfd-5d57-41d8-889c-61b8b6860cad")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])

    @staticmethod
    def treasure_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –≤—ã–≥–æ–¥", url="https://ppdu.ru/gifts/c94552a5-a5b6-4e65-b191-9b6bc36cd85b")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])

class Database:
    def __init__(self, db_path: str = "users.db"):
        self.db_path = db_path
    
    async def init_db(self):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    subscribed BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )''')
            await db.commit()
    
    async def add_user(self, user_id: int):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute(
                "INSERT OR IGNORE INTO users (user_id) VALUES (?)", 
                (user_id,)
            )
            await db.commit()
    
    async def update_subscription(self, user_id: int, status: bool):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute(
                "UPDATE users SET subscribed = ? WHERE user_id = ?",
                (status, user_id)
            )
            await db.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ë–î
bot = Bot(token=config.API_TOKEN)
dp = Dispatcher()
db = Database()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
async def shutdown(signal, loop, bot: Bot):
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    await bot.session.close()
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    [t.cancel() for t in tasks]
    await asyncio.gather(*tasks, return_exceptions=True)
    loop.stop()

@dp.errors(exception=TelegramConflictError)
async def handle_conflict_error(event: ErrorEvent):
    logger.critical("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await asyncio.sleep(5)
    await dp.start_polling(bot)

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        await db.add_user(message.from_user.id)
        
        if not await check_subscription(message.from_user.id):
            await message.answer(
                Texts.SUBSCRIBE_REQUIRED,
                reply_markup=Keyboards.subscription()
            )
            await state.set_state(Form.check_subscription)
            return

        await message.answer(Texts.WELCOME, reply_markup=Keyboards.main_menu())
        await state.set_state(Form.main_menu)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")
        await message.answer(Texts.ERROR)

@dp.callback_query(F.data == "check_subscription")
async def check_subscription_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        if await check_subscription(callback.from_user.id):
            await callback.message.edit_text(
                Texts.WELCOME,
                reply_markup=Keyboards.main_menu()
            )
            await state.set_state(Form.main_menu)
        else:
            await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        await callback.answer(Texts.ERROR)

@dp.callback_query(F.data.in_({"credit", "loans", "insurance", "jobs", "treasure"}))
async def menu_handler(callback: types.CallbackQuery):
    try:
        menu_map = {
            "credit": (Keyboards.credit_menu(), Texts.CREDIT_TITLE),
            "loans": (Keyboards.loans_menu(), Texts.LOANS_TITLE),
            "insurance": (Keyboards.insurance_menu(), Texts.INSURANCE_TITLE),
            "jobs": (Keyboards.jobs_menu(), Texts.JOBS_TITLE),
            "treasure": (Keyboards.treasure_menu(), Texts.TREASURE_TITLE)
        }
        keyboard, text = menu_map[callback.data]
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é: {str(e)}")
        await callback.answer(Texts.ERROR)

@dp.callback_query(F.data == "back")
async def back_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            Texts.MENU,
            reply_markup=Keyboards.main_menu()
        )
        await state.set_state(Form.main_menu)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")
        await callback.answer(Texts.ERROR)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_subscription(user_id: int):
    try:
        member = await bot.get_chat_member(config.CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        return False

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    await db.init_db()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks
    app = web.Application()
    app.router.add_get("/ping", lambda request: web.Response(text="pong"))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    loop = asyncio.get_event_loop()
    for sig in (signal.SIGTERM, signal.SIGINT):
        loop.add_signal_handler(
            sig, lambda: asyncio.create_task(shutdown(sig, loop, bot))
        )

    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    max_retries = 5
    retry_delay = 5
    
    for attempt in range(max_retries):
        try:
            await dp.start_polling(
                bot,
                allowed_updates=dp.resolve_used_update_types(),
                timeout=60,
                relax=0.1
            )
            break
        except TelegramConflictError:
            if attempt < max_retries - 1:
                logger.warning(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç! –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...")
                await asyncio.sleep(retry_delay)
                retry_delay *= 2
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞")
                sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())